"\u003C?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Rapports;\r\nuse App\\Entity\\Technicien;\r\nuse App\\Helpers;\r\nuse App\\Repository\\RapportsRepository;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\nuse Lexik\\Bundle\\JWTAuthenticationBundle\\Encoder\\JWTEncoderInterface;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\n\r\nclass TechnicienFeaturesController extends AbstractController\r\n{\r\n    public  function __construct ()\r\n    {\r\n\r\n    }\r\n    \/**\r\n     * @Route(\u0022\/Techniciens\/PublishReport\u0022, name=\u0022app_technicien\u0022)\r\n     *\/\r\n    public function index(\r\n        Request $request,\r\n \/\/       JWTTokenManagerInterface $JWTTokenManager,\r\n \/\/       TokenStorageInterface $tokenStorageInterface,\r\n        Helpers $helpers,\r\n        jwtEncoderInterface $jwtEncoder\r\n    ): JsonResponse\r\n    {\r\n        $file = $request-\u003Efiles-\u003Eall();\r\n        $token= $request-\u003Ecookies-\u003Eget(\u0022user\u0022);\r\n        $userDecodedData = $jwtEncoder-\u003Edecode($token);\r\n\r\n        return new JsonResponse([\u0022token\u0022=\u003E$token,\u0022decodedtoken\u0022=\u003E$userDecodedData ]);\r\n        if(!$token){return;}\r\n        $userDecodedData = $jwtEncoder-\u003Edecode($token);\r\n\/\/        $idd= 2;\r\n        $TechnicienSender = $helpers-\u003EsearchUser(null,$userDecodedData[\u0027id\u0027]);\r\n        $ClientReceiver = $helpers-\u003EsearchUser($email,null);\r\n\r\n        \/\/$client = $this-\u003EgetClient($request-\u003Erequest-\u003Eget(\u0027email\u0027), $entity);\r\n        if (!$ClientReceiver) {\r\n            return new JsonResponse(\u0027client introuvable\u0027, Response::HTTP_BAD_REQUEST);\r\n        }\r\n        $rapport = new Rapports();\r\n        $rapport-\u003EsetTitle($request-\u003Erequest-\u003Eget(\u0027title\u0027));\r\n        $uploadedFile = $request-\u003Efiles-\u003Eget(\u0027file\u0027);\r\n        $uploadsDirectory = $this-\u003EgetParameter(\u0027upload_directory\u0027);\r\n        $originalFilename = pathinfo($uploadedFile-\u003EgetClientOriginalName(), PATHINFO_FILENAME);\r\n        $newFilename = $originalFilename . \u0027-\u0027 . uniqid() . \u0027.\u0027 . $uploadedFile-\u003EguessExtension();\r\n        $uploadedFile-\u003Emove($uploadsDirectory, $newFilename);\r\n        $rapport-\u003EsetContent($newFilename)-\u003EsetTech($TechnicienSender)-\u003EsetClient($ClientReceiver);\r\n        RapportsRepository::class-\u003Eadd($rapport,true);\r\n        return new JsonResponse(\u0022 Report Sent To The Specific Client \u0022, Response::HTTP_OK);\r\n\r\n\r\n\r\n\r\n\r\n        \/\/-------------------------\r\n        return  new JsonResponse(json_decode($request-\u003EgetContent(),true)\r\n            ,Response::HTTP_OK);\r\n\r\n    }\r\n\r\n\r\n    \/**\r\n     * @Route(\u0022\/gen\/send\/rapport\u0022, name=\u0022stockRapport\u0022, methods={\u0022POST\u0022})\r\n     *\/\r\n    public function send(Request $req, EntityManagerInterface $entity)\r\n    {\r\n\r\n    }\r\n\r\n    private function gettechnicien(int $id, EntityManagerInterface $em): ?Technicien\r\n    {\r\n        return $em-\u003EgetRepository(Technicien::class)-\u003EfindOneBy([\u0027id\u0027 =\u003E $id]);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------------------------------------------------\r\n\u003C?php\r\n\r\nnamespace App\\Controller;\r\n\r\n\r\n\r\nuse App\\Repository\\ClientsRepository;\r\nuse App\\Repository\\TechnicienRepository;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\Serializer\\SerializerInterface;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\nclass MainController extends AbstractController\r\n{\r\n    \/**\r\n     * @Route(\u0022\/Admin\u0022, name=\u0022AdminMain\u0022,methods=\u0022GET\u0022)\r\n     *\/\r\n    public function index(ClientsRepository $clientsRep, SerializerInterface $serializer ,\r\n\r\n                          TechnicienRepository $techRep):JsonResponse\r\n    {\r\n\r\n        $serializedClients = json_decode($serializer-\u003Eserialize($clientsRep-\u003EfindAll(), \u0027json\u0027));\r\n        $serializedTechs= json_decode($serializer-\u003Eserialize($techRep-\u003EfindAll(), \u0027json\u0027));\r\n        return new JsonResponse([\r\n            \u0022Techs\u0022=\u003E$serializedTechs,\r\n            \u0022Clients\u0022=\u003E$serializedClients\r\n        ]);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n------------------------------------------------------------------------------\r\n\u003C?php\r\n\r\nnamespace App\\Controller;\r\n\r\n\r\nuse App\\Entity\\Clients;\r\n\r\nuse App\\Entity\\Technicien;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse App\\Repository\\ClientsRepository;\r\nuse App\\Repository\\TechnicienRepository;\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse App\\Helpers;\r\nclass AdminProfileController extends AbstractController\r\n{\r\n    \/**\r\n     * @Route(\u0022\/Admin\/newUser\u0022, name=\u0022AddClient\u0022)\r\n     *\/\r\n    public function ajouterClient(Request $request,\r\n                                  TechnicienRepository $technicienRepository,\r\n                                  ClientsRepository $clientsRepository,\r\n                                  Helpers $helpers)\r\n    {\r\n        $UserInfo = json_decode($request-\u003EgetContent(),true);\r\n        $checkUserExistence = $helpers-\u003ESearchUser(email:$UserInfo[\u0022email\u0022],id: null);\r\n        if ($checkUserExistence) {\r\n            return  new JsonResponse(\u0022Email existe\u0022,JSONResponse::HTTP_CONFLICT);\r\n        }\r\n        switch ($UserInfo[\u0022Role\u0022]) {\r\n            case \u0022CLIENT\u0022:{\r\n                $client = new Clients();\r\n                $client-\u003EsetUsername($UserInfo[\u0022username\u0022])-\u003EsetEmail($UserInfo[\u0022email\u0022])\r\n                    -\u003EsetPassword($UserInfo[\u0027password\u0027]);\r\n                $clientsRepository-\u003Eadd($client, true);\r\n                break;\r\n            }\r\n            case \u0022TECHNICIEN\u0022:{\r\n                $Technicien = new Technicien();\r\n                $Technicien-\u003EsetUsername($UserInfo[\u0022username\u0022])-\u003EsetEmail($UserInfo[\u0022email\u0022])\r\n                    -\u003EsetPassword($UserInfo[\u0027password\u0027]);\r\n                $technicienRepository-\u003Eadd($Technicien, true);\r\n\r\n                break;\r\n            }\r\n        }\r\n        return new JsonResponse(\u0022user created\u0022,JsonResponse::HTTP_OK);\r\n\r\n    }\r\n\r\n\r\n    \/**\r\n     * @Route(\u0022Admin\/delete\/{id}\u0022, name=\u0022suppclient\u0022)\r\n     *\/\r\n    public function supprimerClient($id, Helpers $helpers, ClientsRepository $clientsRepository, TechnicienRepository $technicienRepository): Response\r\n    {\r\n        $user = $helpers-\u003EsearchUser(null, $id);\r\n\r\n        if (!$user) {\r\n            return new JsonResponse(\u0027User not found for id \u0027 . $id, JsonResponse::HTTP_NOT_FOUND);\r\n        }\r\n\r\n        if ($user[\u0022type\u0022] == \u0022CLIENT\u0022) {\r\n            $clientsRepository-\u003Eremove($user[\u0022user\u0022], true);\r\n            return new JsonResponse(\u0027Client supprim\u00e9 avec succ\u00e8s\u0027, Response::HTTP_OK);\r\n        }\r\n\r\n        if ($user[\u0022type\u0022] == \u0022TECHNICIEN\u0022) {\r\n            $technicienRepository-\u003Eremove($user[\u0022user\u0022], true);\r\n            return new JsonResponse(\u0027Technicien supprim\u00e9 avec succ\u00e8s\u0027, Response::HTTP_OK);\r\n        }\r\n\r\n        return new JsonResponse(\u0027Unable to delete user\u0027, Response::HTTP_BAD_REQUEST);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n----------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\u003C?php\r\n\r\nnamespace App;\r\n\r\nuse Exception;\r\nuse App\\Entity\\Clients;\r\nuse App\\Entity\\Technicien;\r\nuse App\\Repository\\AdminRepository;\r\nuse App\\Repository\\ClientsRepository;\r\nuse App\\Repository\\TechnicienRepository;\r\n\r\nclass Helpers\r\n{\r\n        private $technicienRepository;\r\n        private $adminRepository;\r\n        private $clientsRepository;\r\n\r\npublic function __construct(AdminRepository $adminRepository, ClientsRepository $clientsRepository,\r\nTechnicienRepository $technicienRepository)\r\n{\r\n            $this-\u003EadminRepository = $adminRepository;\r\n            $this-\u003EclientsRepository = $clientsRepository;\r\n            $this-\u003EtechnicienRepository = $technicienRepository;\r\n}\r\n\r\npublic function searchUser($email, $id)\r\n{\r\n    $criteria = [];\r\n    try {\r\n        if ($email !== null) {\r\n        $criteria[\u0022email\u0022] = $email;\r\n        }\r\n        if ($id !== null) {\r\n        $criteria[\u0022id\u0022] = $id;\r\n        }\r\n        $isAdmin = $this-\u003EadminRepository-\u003EfindOneBy($criteria);\r\n        if ($isAdmin) {\r\n            return [\r\n                \u0027type\u0027 =\u003E \u0022ADMIN\u0022,\r\n                \u0027user\u0027 =\u003E $isAdmin\r\n            ];}\r\n\r\n        $isClient = $this-\u003EclientsRepository-\u003EfindOneBy($criteria);\r\n        if ($isClient) {\r\n            return [\r\n                \u0027type\u0027 =\u003E \u0022CLIENT\u0022,\r\n                \u0027user\u0027 =\u003E $isClient\r\n            ];}\r\n        $isTechnicien = $this-\u003EtechnicienRepository-\u003EfindOneBy($criteria);\r\n        if ($isTechnicien) {\r\n            return [\r\n                \u0027type\u0027 =\u003E \u0022TECHNICIEN\u0022,\r\n                \u0027user\u0027 =\u003E $isTechnicien\r\n            ];}\r\n\r\n        return null;\r\n    } catch (Exception $e) {\r\n        error_log($e-\u003EgetMessage());\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------------------\r\n\u003C?php\r\n\r\nnamespace App\\Controller;\r\n\r\n\r\n\r\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\r\nuse Symfony\\Component\\Serializer\\SerializerInterface;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nclass MainController extends AbstractController\r\n{\r\n    \/**\r\n     * @Route(\u0022\/Admin\u0022, name=\u0022AdminMain\u0022,methods=\u0022GET\u0022)\r\n     *\/\r\n    public function index(ClientsRepository $clientsRep ,\r\n                          SerializerInterface $serializer,\r\n                          TechnicienRepository $techRep):JsonResponse\r\n    {\r\n\r\n        $serializedClients = json_decode($serializer-\u003Eserialize($clientsRep-\u003EfindAll(), \u0027json\u0027));\r\n        $serializedTechs= json_decode($serializer-\u003Eserialize($techRep-\u003EfindAll(), \u0027json\u0027));\r\n        return new JsonResponse([\r\n            \u0022Techs\u0022=\u003E$serializedTechs,\r\n            \u0022Clients\u0022=\u003E$serializedClients\r\n            ]);\r\n    }\r\n\r\n\r\n}\r\n"